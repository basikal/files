# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
	worker_connections 2048;
}

http {
	log_format  main  '$remote_addr - $remote_user [$time_local] "$request"';
	'$status $body_bytes_sent "$http_referer"';
	'"$http_user_agent" "$http_x_forwarded_for"';

	access_log  /var/log/nginx/access.log  main;

	sendfile            on;
	tcp_nopush          on;
	tcp_nodelay         on;
	keepalive_timeout   65;
	types_hash_max_size 2048;

	include             /etc/nginx/mime.types;
	default_type        application/octet-stream;

	server_names_hash_bucket_size 256;
	server_names_hash_max_size 2048;
	variables_hash_max_size 2048;
	variables_hash_bucket_size 2048;
	limit_conn_zone $binary_remote_addr zone=addr:25m;
	limit_req_zone $binary_remote_addr zone=one:10m rate=3r/s;
	server {
		location / {
			limit_req zone=one burst=20;
		}
		client_body_timeout 10s;
		client_header_timeout 10s;
		client_body_buffer_size 200K;
		client_header_buffer_size 2k;
		client_max_body_size 200k;
		large_client_header_buffers 3 1k;
		
		## webdav
		auth_basic realm_name;
		auth_basic_user_file /etc/nginx/.credentials.list;
		dav_methods PUT DELETE MKCOL COPY MOVE;
		dav_ext_methods PROPFIND OPTIONS;
		dav_access user:rw group:rw all:r;
		client_body_temp_path /tmp/nginx/client-bodies;
		client_max_body_size 0;
		create_full_put_path on;
	}

	# Load modular configuration files from the /etc/nginx/conf.d directory.
	# See http://nginx.org/en/docs/ngx_core_module.html#include
	# for more information.
	include /etc/nginx/conf.d/*.conf;

	server {
		listen       80 default_server;
		listen       [::]:80 default_server;
		root         /usr/share/nginx/html;
		server_name relay.ovh;
	
		# Redirect to the correct place, if needed
		set $https_redirect 0;
		if ($server_port = 80) { set $https_redirect 1; }
		if ($host ~ '^www\.') { set $https_redirect 1; }
		if ($https_redirect = 1) {
			return 301 https://$server_name$request_uri;
		}
		# Default files to load
		index index.html;

		# Redirect all error
		#error_page 403 /index.html;
		#error_page 404 /index.html;
		#error_page 429 /index.html;
		#error_page 500 /index.html;
		#error_page 501 /index.html;
		#error_page 502 /index.html;
		#error_page 503 /index.html;
		#error_page 504 /index.html;

		location / {
			# First attempt to serve request as file, then
			# as directory, then fall back to blackhole 444.
			#try_files $uri $uri/ =444;
			if ($http_user_agent ~* (wget|curl|python|zgrab) ) {
				return 444;
			}
			error_page 301 400 403 404 500 502 503 504 =444 /blackhole.html;
			location = /blackhole.html {
				return 444;
			}
		}

		# Load configuration files for the default server block.
		include /etc/nginx/default.d/*.conf;
	}

	server {
		listen [::]:443 ssl ipv6only=on; # managed by Certbot
		listen 443 ssl; # managed by Certbot
		ssl_certificate /etc/letsencrypt/live/domain.com/fullchain.pem; # managed by Certbot
		ssl_certificate_key /etc/letsencrypt/live/domain.com/privkey.pem; # managed by Certbot
		#include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
		ssl_session_timeout 10m;
		ssl_session_cache shared:SSL:128m;
		ssl_session_tickets off;
		ssl_dhparam /etc/ssl/dhparam.pem; # managed by Certbot
		ssl_prefer_server_ciphers on;
		ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
		#ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
		ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
		ssl_stapling on;
		ssl_stapling_verify on;
		#resolver 1.1.1.1 valid=300s;
		#resolver_timeout 10s;
		# Prevent clickjacking attacks
		add_header X-Frame-Options DENY;
		# Prevent "mime" based attacks
		add_header X-Content-Type-Options nosniff;
		# Prevent XSS attacks
		add_header X-XSS-Protection "1; mode=block";
		# Set Referrer-Policy Header
		add_header Referrer-Policy "no-referrer";

		# Root dir
		root /usr/share/nginx/html;
		# Default files to load
		index index.html;

		# Redirect all error
		#error_page 403 /index.html;
		#error_page 404 /index.html;
		#error_page 429 /index.html;
		#error_page 500 /index.html;
		#error_page 501 /index.html;
		#error_page 502 /index.html;
		#error_page 503 /index.html;
		#error_page 504 /index.html;

		location / {
			# First attempt to serve request as file, then
			# as directory, then fall back to blackhole 444.
			if ($http_user_agent ~* (wget|curl|python|zgrab) ) {
				return 444;
			}
			error_page 301 400 403 404 500 502 503 504 =444 /blackhole.html;
			location = /blackhole.html {
					return 444;
			}
		}
	}

}

